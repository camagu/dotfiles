# tmux.conf
# =========

# General
# -------

# Expect to receive utf-8 chars in status line
set  -g status-utf8 on
setw -g status-utf8 on

# Keep a long history
set -g history-limit 100000

# Enable xterm keys so vim's keybindings are not affected
set -g xterm-keys on

# Use 256 color so vim and terminal themes look good
set -g default-terminal "screen-256color"

# Mouse support not enabled becasue:
#
# - Hard mode is the best way to build new habits
# - In OS X mouse support requires [MouseTerm](https://bitheap.org/mouseterm/)
#set -g mode-mouse on
#set -g mouse-resize-pane on
#set -g mouse-select-pane on
#set -g mouse-select-window on

# Start windows at index 1
set -g base-index 1

# Don't let terminal mess with titles
setw -g automatic-rename off

# Notify when window has activity
set  -g monitor-activity on
setw -g monitor-activity on

# Refresh status line every 2 seconds
set -g status-interval 2

# Theming
# -------
# Themes are generate with vim using the current colorschema and are stored in
# ~/dotfiles/tmux/themes/ . Having the same colorshema settings and name in
# terminal and vim can help us determine which tmux theme to use.

# When using iTerm we can determine the theme name by reading the $ITERM_PROFILE
# variable.
if-shell "[ $ITERM_PROFILE ] && \
  [ -f ${HOME}/dotfiles/tmux/themes/${ITERM_PROFILE}.conf ]" \
  "source ${HOME}/dotfiles/tmux/themes/${ITERM_PROFILE}.conf "

# Bindings
# --------
#   - Many of the bindings are based on Vim
#   - Some cmds are bind to plain and C-* versions
#   - Default bindings are removed
#   - Overriten bindings are annotated

# Bind `prefix` to `<c-a>` since `<c-b>`:
#   - Is not that pratical
#   - Is already used by vim
#   - Is a commom tmux override
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Navigate panes
#   NOTE: Default bindings are kept
unbind l # Used by last-window
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# (s)pilt and (v)ertical split windows
unbind %
unbind s # Use by used-tree
bind   s split-window -c "#{pane_current_path}"
bind C-s split-window -c "#{pane_current_path}"

unbind '"'
bind   v split-window -h -c "#{pane_current_path}"
bind C-v split-window -h -c "#{pane_current_path}"

# Use Escape and 'a' to enter copy mode
#   - Escape resembles vim
#   - 'a' is practial
unbind      [
bind   Escape copy-mode
bind        a copy-mode

# (p)aste buffer
unbind p # Used by previous-window
unbind ]
bind   p paste-buffer

# New (t)ab (actually a window)
unbind t # Used by clock-mode
unbind c
bind   t new-window -c "#{pane_current_path}"

# Quit
unbind q # Used by confirm before killing pane
bind   q confirm-before -p "Kill session #S?" kill-session

# Use vi keys in the command prompt and in the copy and choice modes
set  -g status-keys vi
setw -g mode-keys vi

# Small adjustments for vi copy mode
#   NOTE: Original bindings are kept
bind -t vi-copy v begin-selection
bind -t vi-copy y copy-selection
